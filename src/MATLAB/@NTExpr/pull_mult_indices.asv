function [a_inner_idx, a_inter_idx, a_outer_idx, b_inner_idx, b_inter_idx, b_outer_idx]=pull_mult_indices(A,B)
%Given two NTExpr's will pull the sequence of inner, inter and outer
%product indices expressed by the two expressions
if ~isa(B,'NTExpr') 
    error('NTExpr''s can only be multipled with other NTExpr''s');
end



%find common indices
%unfortunately it's faster to use set intersect's default option, and then
%manually sort arrays later based on the order of indices in a
a_all=1:length(A.m_indices);
b_all=1:length(B.m_indices);
b_no_intersect= true(1,length(B.m_indices));
[a_idx, b_idx]=ismember(A.m_indices,B.m_indices);
common=A.m_indices(a_idx);
common_a_idx=a_all(a_idx);
common_b_idx=b_idx(a_idx);
b_no_intersect(common_b_idx)=0;
%find common indices with !
found_entrywise = regexp(common,'!');
found_entrywise=cellfun('isempty',found_entrywise);

%indices that have exclamation point are entry-wise products
a_inter_idx=common_a_idx(~found_entrywise);
b_inter_idx=common_b_idx(~found_entrywise);
%indices that don't are inner products
a_inner_idx=common_a_idx(found_entrywise);
b_inner_idx=common_b_idx(found_entrywise);
%get outerproduct indices of both sets
a_outer_idx=a_all(~a_idx);
outer_a=A.m_indices(a_outer_idx);
b_outer_idx=b_all(b_no_intersect);
outer_b=B.m_indices(b_outer_idx);
%now remove exclamation points, to do error checking
%only_letters1= regexprep(common,'!','');
only_letter2= regexprep(outer_a,'!','');
only_letter3= regexprep(outer_b,'!','');

test=ismember(only_letter2,only_letter3);
if(sum(test)>0)
  error('Indices must match with both their letter characters and number of exclamation points.')
end

% a_outer_idx=[];
% b_outer_idx=[];
% a_inner_idx=[];
% b_inner_idx=[];
% a_inter_idx=[];
% b_inter_idx=[];
% 
% 
% 
% for i=1:length(a_indices)
%     a_cur_idx=a_indices{i};  
%     a_ltr_idx=get_letter(a_cur_idx);
%     a_flag=0;
%     for j=1:length(b_indices)
%         b_cur_idx=b_indices{j};
%         b_ltr_idx=get_letter(b_cur_idx);
%         if isequal(a_ltr_idx,b_ltr_idx)
%             if(length(a_cur_idx)~=length(b_cur_idx))
%                 error('Matching indices must have the same number of ''!'' marks')
%             end
%             if(a_cur_idx(1)=='!' && b_cur_idx(1)=='!')                              
%                 a_inter_idx=[a_inter_idx i];
%                 b_inter_idx=[b_inter_idx j];                
%             else
%                 a_inner_idx=[a_inner_idx i];
%                 b_inner_idx=[b_inner_idx j];
%             end
%             a_flag=1;  
%             break;
%         end
%     end
%     if(~a_flag)        
%         a_outer_idx=[a_outer_idx i];
%     end
%     
% end
% 
% b_used_indices=[b_inner_idx b_inter_idx];
% for i=1:length(b_indices)
%     if(sum(b_used_indices==i)==0)
%         b_outer_idx=[b_outer_idx i];
%     end
% end
% 
% function ltr_idx=get_letter(cur_idx)    
%     letter_start=regexp(cur_idx,'[a-z]', 'once');
%     ltr_idx=cur_idx(letter_start:end);
%     
% end

end